from collections.abc import Iterable

import murshop24_models as models  # type: ignore
import pytz  # type: ignore
from aiogram import types
from aiogram.utils import keyboard
from murshop24_models import enums as model_enums  # type: ignore

from murshop24_tg_bot import _callback_data, _consts

_months = {
    1: "—è–Ω–≤–∞—Ä—è",
    2: "—Ñ–µ–≤—Ä–∞–ª—è",
    3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è",
    6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è",
    8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è",
    11: "–Ω–æ—è–±—Ä—è",
    12: "–¥–µ–∫–∞–±—Ä—è",
}


def orders(orders: Iterable[models.Order]) -> types.InlineKeyboardMarkup:
    builder = keyboard.InlineKeyboardBuilder()
    for order in orders:
        created_at = order.created_at.replace(tzinfo=pytz.utc).astimezone(
            pytz.timezone(_consts.PYTZ_TIMEZONE)
        )
        match order.status:
            case model_enums.OrderStatus.CANCELED:
                status = "üö´"
            case _:
                status = "‚è≥"
        text = (
            f"{status} {created_at.day} {_months[created_at.month]}, "
            f"{created_at.strftime('%H:%M')} ¬∑ {order.price}—Ç–≥"
        )
        builder.button(text=text, callback_data=_callback_data.Order(id=order.id))
    builder.button(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=_consts.CallbackData.START)
    builder.adjust(1)
    return builder.as_markup()


def order(order: models.Order, can_confirm: bool = True, can_cancel: bool = True) -> types.InlineKeyboardMarkup:
    builder = keyboard.InlineKeyboardBuilder()
    if can_confirm:
        builder.button(
            text="–û–ø–ª–∞—Ç–∏–ª",
            callback_data=_callback_data.Order(id=order.id, confirm=True),
        )
    if can_cancel:
        builder.button(
            text="–û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=_callback_data.Order(id=order.id, cancel=True),
        )
    builder.button(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=_consts.CallbackData.ORDERS)
    builder.adjust(1)
    return builder.as_markup()
